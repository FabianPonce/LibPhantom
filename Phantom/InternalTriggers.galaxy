bool libPhantom_TriggerAllianceSubmitButtonClicked(bool checkConds, bool runActions)
{
	int player = EventPlayer();
	int i = 0;
	while( i < c_phantomMaxPlayers)
	{
		if( libPhantom_AllianceCheckbox[player][i] <= 0 )
		{
			i += 1;
			continue;
		}
		
		// Are we allied and visioned?
		if( libNtve_gf_DialogItemIsChecked(libPhantom_AllianceCheckbox[player][i], player) && libNtve_gf_DialogItemIsChecked(libPhantom_VisionCheckbox[player][i], player) )
		{
			if( libPhantom_HasMapFlag(c_phantomMapFlag_NoSharedVision) ) {
				libNtve_gf_SetAllianceOneWay(player, i, 0);
			} else {
				libNtve_gf_SetAllianceOneWay(player, i, 1);
			}
		} else if( libNtve_gf_DialogItemIsChecked(libPhantom_AllianceCheckbox[player][i], player) && !libNtve_gf_DialogItemIsChecked(libPhantom_VisionCheckbox[player][i], player) )
		{
			// Allied but no vision?
			libNtve_gf_SetAllianceOneWay(player, i, 0);
		} else if( !libNtve_gf_DialogItemIsChecked(libPhantom_AllianceCheckbox[player][i], player) && !libNtve_gf_DialogItemIsChecked(libPhantom_VisionCheckbox[player][i], player) )
		{
			// No alliance, no vision!
			libNtve_gf_SetAllianceOneWay(player, i, 5);
		} else if( !libNtve_gf_DialogItemIsChecked(libPhantom_AllianceCheckbox[player][i], player) && libNtve_gf_DialogItemIsChecked(libPhantom_VisionCheckbox[player][i], player) )
		{
			// No alliance, but we have vision!
			if( libPhantom_HasMapFlag(c_phantomMapFlag_NoSharedVision) ) {
				libNtve_gf_SetAllianceOneWay(player, i, 5);
			} else {
				libNtve_gf_SetAllianceOneWay(player, i, 6);
			}
		}
		
		i += 1;
	}
	
	
	// ...and get rid of the dialog
	libPhantom_ToggleAllianceDialog(EventPlayer());
	return true;
}

bool libPhantom_TriggerClickVoteButton(bool checkConds, bool runActions)
{
	int player = EventPlayer();
	int i;
	int o;
	if( libPhantom_HasPlayerVoted(player) )
	{
		return true;
	}
	
	libPhantom_PlayerVoted(player);
	
	// Vote for Game Mode!
	i = 0;
	while(i < c_phantomGameMode_MAX)
	{
		if( libNtve_gf_DialogItemIsChecked(libPhantom_GameModes[i].dialogControl, player) )
		{
			// We voted for this
			libPhantom_GameModes[i].votes += 1;
			libPhantom_ModeVotedFor[player] = i;
			break;
		}
		i += 1;
	}
	
	// Votes for Game Variant Groups
	i = 0;
	o = 0;
	while( i < c_phantomGameVariantGroup_MAX)
	{
		o = 0;
		while(o < c_phantomMaxVariantsPerGroup)
		{
			if( libPhantom_GameVariants[i].variants[o].name != "" && libNtve_gf_DialogItemIsChecked(libPhantom_GameVariants[i].variants[o].dialogControl, player) )
			{
				// We voted for this.
				libPhantom_GameVariants[i].variants[o].votes += 1;
				break; // Out of inner loop, to outer loop.
			}
			o += 1;
		}
		i += 1;
	}
	
	// And now votes for the standalone variants.
	i = 0;
	while(i < c_phantomGameVariant_MAX)
	{
		if( libNtve_gf_DialogItemIsChecked(libPhantom_StandaloneGameVariants[i].dialogControl, player) )
		{
			libPhantom_StandaloneGameVariants[i].votes += 1;
		}
		i += 1;
	}
	
	// Hide the vote dialog now
	TriggerExecute(TriggerCreate("libPhantom_TriggerClickSkipButton"), true, true);
	TriggerExecute(TriggerCreate("libPhantom_TriggerAskPreferredRole"), true, true);
	return true;
}

bool libPhantom_TriggerAskPreferredRole(bool checkConds, bool runActions)
{
	libPhantom_BuildPreferredRoleDialog(EventPlayer());
	return true;
}

bool libPhantom_TriggerChosePreferredRole(bool checkConds, bool runActions)
{
	int i = 0;
	int p = EventPlayer();
	
	// No choosing twice
	if( libPhantom_RolePrefferedChosen[p] ) {
		return true;
	}
	
	while(i < c_phantomRole_MAX)
	{
		if( libPhantom_RoleVoteButtons[p][i] == EventDialogControl() )
		{
			// We preferred this role
			libPhantom_RolePrefferedChosen[p] = true;
			libPhantom_PreferredRole[p] = i;
			if( libPhantom_RolePreferredPlayers[i] == null ) {
				libPhantom_RolePreferredPlayers[i] = PlayerGroupEmpty();
			}
			PlayerGroupAdd(libPhantom_RolePreferredPlayers[i], p);
			DialogDestroy(DialogControlGetDialog(EventDialogControl()));
			return true;
		}
		i += 1;
	}
	
	// We get here if we pick Random.
	DialogDestroy(DialogControlGetDialog(EventDialogControl()));
	return true;
}

bool libPhantom_TriggerClickSkipButton(bool checkConds, bool runActions)
{
	int i = 0;
	while(i < 3+c_phantomGameVariantGroup_MAX)
	{
		if( libPhantom_VoteDialogs[i] != -1 )
		{
			DialogSetVisible( libPhantom_VoteDialogs[i], PlayerGroupSingle(EventPlayer()), false );
		}
		i += 1;
	}
	return true;
}

bool libPhantom_TriggerGameModeDialogCheckboxClicked(bool checkConds, bool runActions)
{
	int player = EventPlayer();
	int dialogControl = EventDialogControl();
	
	if( !libNtve_gf_DialogItemIsChecked(dialogControl, player) ) 
	{
		return true;
	}
	
	libPhantom_ResetGameModeVotes(player, dialogControl);
	return true;
}

// Keeps stuff in "groups" from being checked together, only.
bool libPhantom_TriggerDialogCheckboxClicked(bool checkConds, bool runActions)
{
	int player = EventPlayer();
	int dialogControl = EventDialogControl();
	int i = 0;
	int o = 0;
	if( !libNtve_gf_DialogItemIsChecked(dialogControl, player) ) 
	{
		return true;
	}
	
	// Uncheck any others in this group.
	i = 0;
	while(i < c_phantomGameVariantGroup_MAX)
	{
		o = 0;
		while(o < c_phantomMaxVariantsPerGroup)
		{
			if( libPhantom_GameVariants[i].variants[o].dialogControl == dialogControl )
			{
				// We have a match!
				// Reset all of this guy's group.
				libPhantom_ResetGameVariantGroup(player, i, dialogControl);
				return true;
			}

			o += 1;
		}
		
		i += 1;
	}
	return true;
}

bool libPhantom_TriggerDeceptionDialogSubmitClicked(bool checkConds, bool runActions)
{

	if( libNtve_gf_DialogItemIsChecked(libPhantom_DeceptionCheckbox[EventPlayer()], EventPlayer()) )
	{
		libPhantom_PlayerHideSupplyCap(EventPlayer(), true);
	} else {
		libPhantom_PlayerHideSupplyCap(EventPlayer(), false);
	}

	// And get rid of the deception dialog, last.
	libPhantom_ToggleDeceptionDialog(EventPlayer());
	
	return true;
}

bool libPhantom_TriggerDeceptionScreenButtonClicked(bool checkConds, bool runActions)
{
	libPhantom_ToggleDeceptionDialog(EventPlayer());
	return true;
}

bool libPhantom_TriggerAllianceScreenButtonClicked(bool checkConds, bool runActions)
{
	libPhantom_ToggleAllianceDialog(EventPlayer());
	return true;
}

bool libPhantom_TriggerPeriodicResourceHandout(bool checkConds, bool runActions)
{
	int i;
	int r;
	while(i < c_phantomMaxPlayers)
	{
		r = libPhantom_GetPlayerRole(i, false);
		if( !libPhantom_IsPlayerAlive(i) ) {
			i += 1;
			continue;
		}
		
		// Do we have periodic mineral collection powers?
		if( libPhantom_Roles[r].incomeMinerals > 0 ) {
			PlayerModifyPropertyInt(i, c_playerPropMinerals, c_playerPropOperAdd, libPhantom_Roles[r].incomeMinerals);
		}
		
		// Do we have periodic gas collection powers?
		if( libPhantom_Roles[r].incomeGas > 0 ) {
			PlayerModifyPropertyInt(i, c_playerPropVespene, c_playerPropOperAdd, libPhantom_Roles[r].incomeGas);
		}
		i += 1;
	}
	return true;
}

bool libPhantom_TriggerMapInitialization(bool checkConds, bool runActions) 
{
	int i;
	int dialog;
	int seconds = 30;
	
	libPhantom_LoadBanks();
	
	FogSetEnabled(false);
	GameSetSpeedValue(c_gameSpeedFaster);
	
	MeleeInitUnits();
	MeleeInitResources();
	i = 0;
	while(i != c_phantomMaxPlayers)
	{
		MeleeSetOption(i, c_meleeOptionReveal, true);
		PlayerScoreValueEnableAll(i, false);
		i += 1;
	}
	
	// Disable trading/alliance menu
	UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeTeamResourceButton, false);
	UISetFrameVisible(PlayerGroupActive(), c_syncFrameTypeAllianceButton, false);
	
	// Temp: Disable hotkeys and stuff
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowButtons, false);
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowHotkeys, false);
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowSmartClick, false);
	
	libNtve_gf_SetPlayerGroupAlliance( PlayerGroupActive(), 1 ); // Ally w/ Shared Vision to start.
	
	libNtve_gf_HideGameUI(false, PlayerGroupActive());
	CinematicFade( false, 0.0, c_fadeStyleNormal, Color(0, 0, 0), 0, false);
	
	libPhantom_ShowVotingDialog();
	// Countdown, anyone?
	while( libPhantom_VotingInProgress() && seconds > 0)
	{
		dialog = DialogCreate(200, 200, c_anchorBottom, 0, 50, false);
		DialogSetImageVisible(dialog, false);
		DialogSetVisible(dialog, PlayerGroupActive(), true);
		libNtve_gf_CreateDialogItemLabel(dialog, 200, 200, c_anchorCenter, 0, 0, IntToText(seconds), Color(100,0,0),true,0.1);
		libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeReady", PlayerGroupActive());
		// Now we get written out over 0.1 and wait for 0.4 seconds
		Wait(0.4, c_timeReal);
		DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupActive(), 0.5, 100);
		
		// Fading out over the other 0.5
		Wait(0.5, c_timeReal);
		
		seconds -= 1;
		DialogDestroy(dialog);
	}
	
	// Destroy dialogs if someone didn't vote.
	DialogDestroyAll();
	
	CinematicFade( true, 0, c_fadeStyleNormal, Color(0, 0, 0), 0, false);
	libNtve_gf_HideGameUI(true, PlayerGroupActive());
	
	// Temp: Re-Enable hotkeys and stuff
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowButtons, true);
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowHotkeys, true);
	UISetCommandAllowed(PlayerGroupActive(), c_uiCommandAllowSmartClick, true);
	
	// Activate the game modes based on everyone's votes.
	libPhantom_TallyVotes();
	
	i = 0;
	while(i < c_phantomMaxPlayers)
	{
		if( !PlayerGroupHasPlayer(PlayerGroupActive(), i) ) {
			i += 1;
			continue;
		}
		libPhantom_InitialMinerals[i] = PlayerGetPropertyInt(i, c_playerPropMinerals);
		libPhantom_InitialGas[i] = PlayerGetPropertyInt(i, c_playerPropVespene);
		
		// Do auto-harvest.
		libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), i);
		
		libPhantom_PlayerIncreasePlayedGamesScore(i);
		i += 1;
	}
	
	libPhantom_BuildHelpMenuTips();
	
	// Draw Screen Buttons for Alliance/Deception
	libNtve_gf_DisplayScreenButton(1, StringToText("<s val=\"MercCategory\">Alliances</s>"), 200, 80, c_anchorTopLeft, 30, 50, TriggerCreate("libPhantom_TriggerAllianceScreenButtonClicked") );
	libNtve_gf_SetScreenButtonBorderImage(1, "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds", "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds", c_triggerImageTypeBorder);
	libNtve_gf_DisplayScreenButton(2, StringToText("<s val=\"MercCategory\">Deception</s>"), 200, 80, c_anchorTopLeft, 30, 130, TriggerCreate("libPhantom_TriggerDeceptionScreenButtonClicked") );
	libNtve_gf_SetScreenButtonBorderImage(2, "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds", "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds", c_triggerImageTypeBorder);
	return true;
}

bool libPhantom_TriggerGameModeSelected(bool checkConds, bool runActions)
{
	int i;
	string message;
	text toSend;
	
	// Do we have enough players?
	if( !libPhantom_HasSufficientPlayers() ) {
		libPhantom_SendInformationMessageToAll("Phantom requires additional players.");
		i = 0;
		while( i < c_phantomMaxPlayers ) {
			if( PlayerGroupHasPlayer(PlayerGroupActive(), i) ) {
				GameOver(i, c_gameOverTie, true, true);
			}
			i += 1;
		}
		return true;
	}
	
	// Assign the players to appropriate roles.
	libPhantom_AssignPlayersToRoles();
	
	i = 0;
	while( i < c_phantomMaxPlayers )
	{
		if( !libPhantom_IsPlayerAlive(i) ) {
			i += 1;
			continue;
		}
		message = "";
		// Build message with current game mode and their role and send it to 'em.
		message = libPhantom_GetCurrentGameModeName() + " has been chosen.<n />You are a ";
		message += libPhantom_BuildRoleName(libPhantom_GetPlayerRole(i, true)) + ". ";
		message += libPhantom_Roles[libPhantom_GetPlayerRole(i, true)].objective;
		
		libPhantom_SendInformationMessageToGroup( PlayerGroupSingle(i), message );
		
		i += 1;
	}
	
	libPhantom_SetGameStarted(true);
	return true;
}

bool libPhantom_TriggerUnitDied(bool checkConds, bool runActions)
{
	int plr = UnitGetOwner(EventUnit());
	int killingPlr = EventUnitDamageSourcePlayer();
	int cost;
	fixed bountyPct;
	
	if( !(killingPlr == -1 || EventUnitDamageSourceUnit() == null || killingPlr == plr) )
	{
		bountyPct = libPhantom_Roles[libPhantom_GetPlayerRole(killingPlr, false)].killBounty;
		// Get mineral cost of now-dead unit.
		cost = FixedToInt(UnitTypeGetCost( UnitGetType(EventUnit()), c_unitCostMinerals) * bountyPct);
		PlayerModifyPropertyInt( killingPlr, c_playerPropMinerals, c_playerPropOperAdd, cost);
		// and now gas cost.
		cost = FixedToInt(UnitTypeGetCost( UnitGetType(EventUnit()), c_unitCostVespene) * bountyPct);
		PlayerModifyPropertyInt( killingPlr, c_playerPropVespene, c_playerPropOperAdd, cost);
	}
	
	// Is this player now dead as a result of this death?
	if( libPhantom_IsPlayerReadyToDie(plr) ) {
		libPhantom_EliminatePlayer(plr);
	}

	return true;
}

bool libPhantom_TriggerPlayerLeft(bool checkConds, bool runActions)
{
	if( !libPhantom_IsGameStarted() || !libPhantom_IsGameOver() ) {
		libPhantom_EliminatePlayer(EventPlayer());
	}
	
	// Okay, so, here's the deal: Blizzard decided to be stupid and give us no option to disable resource splitting. So we have to handle that shit.
	// Bleh. So let's reset everyone's minerals to what they used to be.
	PlayerGroupLoopBegin(PlayerGroupActive());
	while( !PlayerGroupLoopDone() )
	{
		PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, libPhantom_CurrentMinerals[PlayerGroupLoopCurrent()]);
		PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, libPhantom_CurrentMinerals[PlayerGroupLoopCurrent()]);
		PlayerGroupLoopStep();
	}
	return true;
}

bool libPhantom_TriggerPeriodicMineralTracker(bool checkConds, bool runActions)
{
	int i = 0;
	while(i < c_phantomMaxPlayers)
	{
		if( PlayerGroupHasPlayer(PlayerGroupActive(), i) )
		{
			libPhantom_CurrentMinerals[i] = PlayerGetPropertyInt(i, c_playerPropMinerals);
			libPhantom_CurrentGas[i] = PlayerGetPropertyInt(i, c_playerPropVespene);
		}
		i += 1;
	}
	return true;
}

bool libPhantom_TriggerPeriodicGameLoop(bool checkConds, bool runActions)
{
	int i;
	int x;
	playergroup p;
	text message;
	text messageSend;
	
	// Do not increment unless game is in progress
	if( !libPhantom_IsGameStarted() )
	{
		return true;
	}
	
	// Increment game timer counter
	libPhantom_GameTime += 1;
	
	i = 0;
	while(i < c_phantomRole_MAX )
	{
		// Is it time to strengthen this role?
		if( libPhantom_Roles[i].onStrengthen != null && libPhantom_GetGameTime() % libPhantom_Roles[i].periodicStrengthenTimer == 0 ) {
			libPhantom_StrengthenRole(i);
			TriggerExecute( libPhantom_Roles[i].onStrengthen, true, true );
		}
		
		if( libPhantom_GetGameTime() % c_phantomWorkerPingTime == 0 )
		{
			x = 0;
			while(x < c_phantomMaxPlayers)
			{
				if( libPhantom_IsPlayerAlive(x) && libPhantom_PlayerHasOnlyWorkers(x) )
				{
					libPhantom_PingWorkers(x);
				}
				x += 1;
			}
		}
		
		// It is time to reveal.
		if( libPhantom_Roles[i].revealAlliesAt != -1 && libPhantom_Roles[i].revealAlliesAt == libPhantom_GetGameTime() ) {
			// Who are in this role?
			p = libPhantom_GetPlayersInRole(i);
			if( PlayerGroupCount(p) <= 1 ) {
				i += 1;
				continue;
			}
			
			if( PlayerGroupCount(p) == 2 ) {
				message = StringToText("The other " + libPhantom_BuildRoleName(i) + " is: ");
				libPhantom_SendInformationMessageToGroupText( PlayerGroupSingle(PlayerGroupPlayer(p, 1)), message + PlayerName(PlayerGroupPlayer(p, 2)));
				libPhantom_SendInformationMessageToGroupText( PlayerGroupSingle(PlayerGroupPlayer(p, 2)), message + PlayerName(PlayerGroupPlayer(p, 1)));
			} else {
				message = StringToText("The other " + libPhantom_BuildPluralRoleName(i) + " are: ");
				PlayerGroupLoopBegin(p);
				while( !PlayerGroupLoopDone() )
				{
					messageSend = message;
					x = 1;
					while(x <= PlayerGroupCount(p))
					{
						if( PlayerGroupPlayer(p, x) == PlayerGroupLoopCurrent() ) {
							x += 1;
							continue;
						}
						
						message += PlayerName(PlayerGroupPlayer(p, x));
						if( x != PlayerGroupCount(p) && !((x+1) == PlayerGroupLoopCurrent()) )
						{
							message += StringToText(", ");
						}
					}
					message += StringToText(".");
					
					libPhantom_SendInformationMessageToGroupText( PlayerGroupSingle(PlayerGroupLoopCurrent()), messageSend );
					PlayerGroupLoopStep();
				}
				PlayerGroupLoopEnd();
			}
			
			if( libPhantom_Roles[i].broadcastReveal ) {
				libPhantom_SendInformationMessageToGroupText( PlayerGroupActive(), StringToText("The " + libPhantom_BuildPluralRoleName(i) + " have been revealed to each other.") );
			}
		}
		
		i += 1;
	}
	
	// Game Mode onPeriodic calls
	if( libPhantom_GameModes[libPhantom_GetCurrentGameMode()].onPeriodic != null )
	{
		TriggerExecute( libPhantom_GameModes[libPhantom_GetCurrentGameMode()].onPeriodic, true, true);
	}
	return true;
}
// Galaxy bug: Must end on newline or errors will be reported on the wrong line
